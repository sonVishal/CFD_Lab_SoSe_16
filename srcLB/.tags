!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BACK	LBDefinitions.h	/^    BACK$/;"	e	enum:__anon3
BOTTOM	LBDefinitions.h	/^    BOTTOM,$/;"	e	enum:__anon3
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Werror -pedantic -Wall -std=c99 #-O0 -g -pg -enable-checking -v -da -Q$/;"	m
C_S	LBDefinitions.h	76;"	d
DUMPOUT	helper.h	296;"	d
DUMP_DOUBLE	helper.h	388;"	d
DUMP_DOUBLE_TO_FILE	helper.h	549;"	d
DUMP_INT	helper.h	365;"	d
DUMP_INT_TO_FILE	helper.h	510;"	d
DUMP_MATRIX_TO_FILE	helper.h	480;"	d
DUMP_MESSAGE	helper.h	342;"	d
DUMP_POSITION	helper.h	319;"	d
DUMP_STRING	helper.h	411;"	d
DUMP_STRING_TO_FILE	helper.h	588;"	d
DUMP_TIMER	helper.h	457;"	d
ERROR	helper.h	44;"	d
ERROUT	helper.h	54;"	d
EXECUTABLE	Makefile	/^EXECUTABLE=lbsim$/;"	m
E_XFIXED	boundary.c	/^enum WALLS{E_XFIXED, E_YFIXED, E_ZFIXED};$/;"	e	enum:WALLS	file:
E_YFIXED	boundary.c	/^enum WALLS{E_XFIXED, E_YFIXED, E_ZFIXED};$/;"	e	enum:WALLS	file:
E_ZFIXED	boundary.c	/^enum WALLS{E_XFIXED, E_YFIXED, E_ZFIXED};$/;"	e	enum:WALLS	file:
FLUID	LBDefinitions.h	/^    FLUID,$/;"	e	enum:__anon2
FREE_ARG	helper.h	17;"	d
FRONT	LBDefinitions.h	/^    FRONT,$/;"	e	enum:__anon3
LATTICEVELOCITIES	LBDefinitions.h	/^static const int LATTICEVELOCITIES[19][3] = {$/;"	v
LATTICEWEIGHTS	LBDefinitions.h	/^static const double LATTICEWEIGHTS[19] = {$/;"	v
LDFLAGS	Makefile	/^LDFLAGS= -lm #-pg$/;"	m
LEFT	LBDefinitions.h	/^    LEFT,$/;"	e	enum:__anon3
MAX_LINE_LENGTH	helper.h	22;"	d
MOVING_WALL	LBDefinitions.h	/^    MOVING_WALL,$/;"	e	enum:__anon2
NO_SLIP	LBDefinitions.h	/^    NO_SLIP,$/;"	e	enum:__anon2
NUMCOMP	LBDefinitions.h	8;"	d
OBJECTS	Makefile	/^OBJECTS=$(SOURCES:.c=.o)$/;"	m
PERIODIC	LBDefinitions.h	/^    PERIODIC$/;"	e	enum:__anon2
PI	helper.h	14;"	d
Q	LBDefinitions.h	/^static const int Q = 19;$/;"	v
READ_DOUBLE	helper.h	89;"	d
READ_ERROR	helper.c	72;"	d	file:
READ_INT	helper.h	77;"	d
READ_STRING	helper.h	101;"	d
RESET_TIMER	helper.h	434;"	d
RIGHT	LBDefinitions.h	/^    RIGHT,$/;"	e	enum:__anon3
SOURCES	Makefile	/^SOURCES=initLB.c visualLB.c boundary.c collision.c streaming.c computeCellValues.c main.c helper.c$/;"	m
TOP	LBDefinitions.h	/^    TOP,$/;"	e	enum:__anon3
WALLS	boundary.c	/^enum WALLS{E_XFIXED, E_YFIXED, E_ZFIXED};$/;"	g	file:
_BOUNDARY_H_	boundary.h	2;"	d
_COLLISION_H_	collision.h	2;"	d
_COMPUTECELLVALUES_H_	computeCellValues.h	4;"	d
_INITLB_H_	initLB.h	2;"	d
_LBDEFINITIONS_H_	LBDefinitions.h	2;"	d
_MAIN_C_	main.c	2;"	d	file:
_STREAMING_H_	streaming.h	2;"	d
_VISUALLB_H_	visualLB.h	6;"	d
__HELPER_H__	helper.h	2;"	d
collideField	LBDefinitions.h	/^    double* collideField;$/;"	m	struct:__anon1
computeCellOffset	boundary.c	/^int computeCellOffset(const int outer, const int inner, const int fixed, const int dir, const int xlength) {$/;"	f
computeCommonVelocity	computeCellValues.c	/^void computeCommonVelocity(const double *const c_density, double c_velocity[2][3], t_component *c, double* commonVel){$/;"	f
computeEqVelocity	computeCellValues.c	/^void computeEqVelocity(t_component const*const c, double const*const commonVelocity, const double compDensity, double const*const compForce, double compEqVelocity[3]) {$/;"	f
computeFeq	computeCellValues.c	/^void computeFeq(const double * const density, const double * const velocity, double *feq){$/;"	f
computeForce	computeCellValues.c	/^void computeForce(const int currentCellIndex, const int currentCompIndex,$/;"	f
computeNumDensity	computeCellValues.c	/^void computeNumDensity(const double *const currentCell, double *density){$/;"	f
computePostCollisionDistributions	collision.c	/^void computePostCollisionDistributions(double *currentCell, const double * const tau, const double *const feq){$/;"	f
computeVelocity	computeCellValues.c	/^void computeVelocity(const double * const currentCell, const double * const density, double *velocity){$/;"	f
d0	LBDefinitions.h	/^    double  d0;$/;"	m	struct:__anon1
densityTol	LBDefinitions.h	/^static const double densityTol  = 0.03;$/;"	v
doCollision	collision.c	/^void doCollision(t_component *c, double G[NUMCOMP][NUMCOMP], int *flagField, int xlength){$/;"	f
doStreaming	streaming.c	/^void doStreaming(t_component *c,int *flagField,int xlength){$/;"	f
errhandler	helper.c	/^void errhandler( int nLine, const char *szFile, const char *szString )$/;"	f
fctPtrPsi	LBDefinitions.h	/^typedef double (*fctPtrPsi)(double);$/;"	t
find_string	helper.c	/^char* find_string( const char* szFileName, const char *szVarName )$/;"	f
fmax	helper.c	/^double fmax( double a, double b)$/;"	f
fmin	helper.c	/^double fmin( double a, double b)$/;"	f
free_imatrix	helper.c	/^void free_imatrix( int **m, int nrl, int nrh, int ncl, int nch )$/;"	f
free_matrix	helper.c	/^void free_matrix( double **m, int nrl, int nrh, int ncl, int nch )$/;"	f
imatrix	helper.c	/^int **imatrix( int nrl, int nrh, int ncl, int nch )$/;"	f
init_imatrix	helper.c	/^void init_imatrix( int **m, int nrl, int nrh, int ncl, int nch, int a)$/;"	f
init_matrix	helper.c	/^void init_matrix( double **m, int nrl, int nrh, int ncl, int nch, double a)$/;"	f
initialiseFields	initLB.c	/^void initialiseFields(t_component * c, int *flagField, int xlength){$/;"	f
last_timer_reset	helper.c	/^clock_t last_timer_reset;$/;"	v
m	LBDefinitions.h	/^    double  m;$/;"	m	struct:__anon1
machNrTol	LBDefinitions.h	/^static const double machNrTol   = 0.1;$/;"	v
main	main.c	/^int main(int argc, char *argv[]){$/;"	f
matrix	helper.c	/^double **matrix( int nrl, int nrh, int ncl, int nch )$/;"	f
max	helper.c	/^int max( int a, int b)$/;"	f
min	helper.c	/^int min( int a, int b)$/;"	f
min_int	helper.c	/^int min_int( const int n1, const int n2 )$/;"	f
p_computeCellOffset	boundary.c	/^int p_computeCellOffset(const int outer, const int inner, const int fixedValue, const int xlength, const int wallIdx){$/;"	f
p_computeCellOffsetXYZ	LBDefinitions.h	/^static inline int p_computeCellOffsetXYZ(const int x, const int y, const int z, const int xlength) {$/;"	f
p_computeCellOffsetXYZ_Q	LBDefinitions.h	/^static inline int p_computeCellOffsetXYZ_Q(const int x, const int y, const int z, const int xlength) {$/;"	f
p_computeNeighborCellOffset	boundary.c	/^int p_computeNeighborCellOffset(int outer, int inner, int fixedValue,$/;"	f
p_setBounceBack	boundary.c	/^void p_setBounceBack(double *collideField, const double * const wallVelocity,$/;"	f
p_setWallBoundaries	boundary.c	/^void p_setWallBoundaries(double *collideField, const int * const flagField,$/;"	f
p_treatSingleWall	boundary.c	/^void p_treatSingleWall(double *collideField, const int * const flagField,$/;"	f
psi0	LBDefinitions.h	/^static inline double psi0(double numberDensity){ return (1-exp(-numberDensity));}$/;"	f
psi1	LBDefinitions.h	/^static inline double psi1(double numberDensity){ return numberDensity;}$/;"	f
psi2	LBDefinitions.h	/^static inline double psi2(double numberDensity){ return 4.0*exp(-200.0\/numberDensity);}$/;"	f
psiFctCode	LBDefinitions.h	/^    int psiFctCode;$/;"	m	struct:__anon1
psiFctPointer	LBDefinitions.h	/^static const fctPtrPsi psiFctPointer[3] = {psi0, psi1, psi2};$/;"	v
readParameters	initLB.c	/^int readParameters(int *xlength, double *tau, double *velocityWall, int *timesteps, int *timestepsPerPlotting, int argc, char *argv[]){$/;"	f
read_double	helper.c	/^void read_double( const char* szFileName, const char* szVarName, double* pVariable)$/;"	f
read_int	helper.c	/^void read_int( const char* szFileName, const char* szVarName, int* pVariable)$/;"	f
read_matrix	helper.c	/^void read_matrix( const char* szFileName,     \/* filename *\/$/;"	f
read_pgm	helper.c	/^int **read_pgm(const char *filename)$/;"	f
read_string	helper.c	/^void read_string( const char* szFileName, const char* szVarName, char*   pVariable)$/;"	f
streamField	LBDefinitions.h	/^    double* streamField;$/;"	m	struct:__anon1
t_component	LBDefinitions.h	/^} t_component;$/;"	t	typeref:struct:__anon1
tau	LBDefinitions.h	/^    double  tau;$/;"	m	struct:__anon1
treatBoundary	boundary.c	/^void treatBoundary(t_component *c, int* flagField, const double * const wallVelocity, int xlength){$/;"	f
treatWallPeriodic	boundary.c	/^void treatWallPeriodic(double * collideField, int direction, int xlength) {$/;"	f
w1	LBDefinitions.h	19;"	d
w1	LBDefinitions.h	31;"	d
w2	LBDefinitions.h	20;"	d
w2	LBDefinitions.h	32;"	d
w3	LBDefinitions.h	21;"	d
w3	LBDefinitions.h	33;"	d
writeVtkOutput	visualLB.c	/^void writeVtkOutput(const t_component * const c,$/;"	f
writeVtkOutputDebug	visualLB.c	/^void writeVtkOutputDebug(const t_component * const c,$/;"	f
write_matrix	helper.c	/^void write_matrix( const char* szFileName,     \/* filename *\/$/;"	f
writevtkHeader	visualLB.c	/^void writevtkHeader(FILE *fp, int xlength)$/;"	f
writevtkHeaderDebug	visualLB.c	/^void writevtkHeaderDebug(FILE *fp, int xlength)$/;"	f
writevtkPointCoordinates	visualLB.c	/^void writevtkPointCoordinates(FILE *fp, int xlength) {$/;"	f
writevtkPointCoordinatesDebug	visualLB.c	/^void writevtkPointCoordinatesDebug(FILE *fp, int xlength) {$/;"	f
